[1mdiff --git a/src/lib/event-pipeline/discover.ts b/src/lib/event-pipeline/discover.ts[m
[1mindex 8563b75..5952709 100644[m
[1m--- a/src/lib/event-pipeline/discover.ts[m
[1m+++ b/src/lib/event-pipeline/discover.ts[m
[36m@@ -53,14 +53,15 @@[m [mexport class EventDiscoverer {[m
       }[m
       [m
       // Wait for all discovery sources with timeout[m
[31m-      const results = await Promise.allSettled(discoveryPromises.map((promise) =>[m
[31m-        promise.then((value) => ({ status: 'fulfilled', value, timeout: false })).catch((error) => ({ status: 'rejected', reason: error }))[m
[31m-      ));[m
[31m-      [m
[32m+[m[32m      const results = await Promise.all(discoveryPromises);[m
[32m+[m
       // Flatten results from all sources[m
       results.forEach((result, index) => {[m
[31m-        if (result.status === 'fulfilled' && Array.isArray(result.value)) {[m
[31m-          candidates.push(...result.value);[m
[32m+[m[32m        if (Array.isArray(result)) {[m
[32m+[m[32m          logger.info({ message: '[discover] Source result', sourceIndex: index, candidateCount: result.length });[m
[32m+[m[32m          candidates.push(...result);[m
[32m+[m[32m        } else {[m
[32m+[m[32m          logger.warn({ message: '[discover] Unexpected result shape from source', sourceIndex: index, resultType: typeof result });[m
         }[m
       });[m
       [m
